# Author: Ali Uneri
# Date: 2011-07-25

# TODO(auneri1) Require libgfortran3 on UNIX.

set(EP_OPTION_NAME "USE_${EP_NAME}")
set(EP_REQUIRED_PROJECTS Git Qt)
set(EP_URL "git://github.com/jhu-cisst/cisst.git")
set(EP_PATCH "${CMAKE_CURRENT_LIST_DIR}/Patches/${EP_NAME}.patch")
set(EP_OPTION_DESCRIPTION "Computer-Integrated Surgical Systems and Technology")

cma_list(APPEND EP_REQUIRED_PROJECTS OpenCV IF USE_OpenCV)
cma_list(APPEND EP_REQUIRED_PROJECTS SWIG IF USE_SWIG)

cma_envvar(PATH PREPEND "@BINARY_DIR@/bin/@INTDIR@")
cma_envvar(@LIBRARYPATH@ PREPEND "@BINARY_DIR@/lib/@INTDIR@")
cma_envvar(PYTHONPATH PREPEND "@BINARY_DIR@/lib/@INTDIR@" IF USE_SWIG)

cma_end_definition()
# -----------------------------------------------------------------------------

set(EP_CMAKE_ARGS
  -DCISST_BUILD_APPLICATIONS:BOOL=OFF
  -DCISST_BUILD_EXAMPLES:BOOL=OFF
  -DCISST_BUILD_SHARED_LIBS:BOOL=${USE_SWIG}
  -DCISST_BUILD_TESTS:BOOL=OFF
  -DCISST_cisstCommon:BOOL=ON
  -DCISST_cisstCommonXML:BOOL=ON
  -DCISST_cisstMultiTask:BOOL=ON
  -DCISST_cisstNumerical:BOOL=ON
  -DCISST_cisstOSAbstraction:BOOL=ON
  -DCISST_cisstParameterTypes:BOOL=ON
  -DCISST_cisstRobot:BOOL=OFF
  -DCISST_cisstStereoVision:BOOL=ON
  -DCISST_cisstVector:BOOL=ON
  -DCISST_HAS_CISSTNETLIB:BOOL=ON
  -DCISST_HAS_FLTK:BOOL=OFF
  -DCISST_HAS_OPENGL:BOOL=ON
  -DCISST_HAS_QT4:BOOL=ON
  -DCISST_HAS_SWIG_PYTHON:BOOL=${USE_SWIG}
  -DCISST_MTS_HAS_ICE:BOOL=OFF
  -DCISST_SVL_HAS_CUDA:BOOL=OFF
  -DCISST_SVL_HAS_FFMPEG:BOOL=OFF
  -DCISST_SVL_HAS_OPENCV2:BOOL=${USE_OpenCV}
  -DCISST_XML_LIB:STRING=QtXML
  -DCISSTNETLIB_DOWNLOAD_NOW:BOOL=ON
  -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
  -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}
  -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
  -DQT_QMAKE_EXECUTABLE:FILEPATH=${${PROJECT_NAME}_QT_QMAKE_EXECUTABLE})

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  list(APPEND EP_CMAKE_ARGS -DCISSTNETLIB_DOWNLOAD_ARCHITECTURE:STRING=x86_64)
elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
  list(APPEND EP_CMAKE_ARGS -DCISSTNETLIB_DOWNLOAD_ARCHITECTURE:STRING=i686)
endif()

if(UNIX AND NOT APPLE)
  list(APPEND EP_CMAKE_ARGS -DCISST_SVL_HAS_X11:BOOL=ON)
else()
  list(APPEND EP_CMAKE_ARGS -DCISST_SVL_HAS_X11:BOOL=OFF)
endif()
if(USE_OpenCV)
  list(APPEND EP_CMAKE_ARGS -DOpenCV_DIR:PATH=${${PROJECT_NAME}_OpenCV_DIR})
endif()
if(USE_SWIG)
  list(APPEND EP_CMAKE_ARGS
    -DPYTHON_EXECUTABLE:FILEPATH=${${PROJECT_NAME}_PYTHON_EXECUTABLE}
    -DPYTHON_INCLUDE_DIR:PATH=${${PROJECT_NAME}_PYTHON_INCLUDE_DIR}
    -DPYTHON_LIBRARY:FILEPATH=${${PROJECT_NAME}_PYTHON_LIBRARY}
    -DPYTHON_NUMPY_INCLUDE_DIR:PATH=${${PROJECT_NAME}_PYTHON_NUMPY_INCLUDE_DIR}
    -DSWIG_DIR:PATH=${${PROJECT_NAME}_SWIG_DIR}
    -DSWIG_EXECUTABLE:FILEPATH=${${PROJECT_NAME}_SWIG_EXECUTABLE}
    -DSWIG_VERSION:STRING=${${PROJECT_NAME}_SWIG_VERSION})
endif()

ExternalProject_Add(${EP_NAME}
  DEPENDS ${EP_REQUIRED_PROJECTS}
  # download
  GIT_REPOSITORY ${EP_URL}
  GIT_TAG 1.0.6
  # patch
  # update
  UPDATE_COMMAND ""
  # configure
  SOURCE_DIR ${PROJECT_BINARY_DIR}/${EP_NAME}
  CMAKE_ARGS ${EP_CMAKE_ARGS}
  # build
  BINARY_DIR ${PROJECT_BINARY_DIR}/${EP_NAME}-build
  # install
  INSTALL_COMMAND ""
  # test
  )

set(${PROJECT_NAME}_${EP_NAME}_DIR "${PROJECT_BINARY_DIR}/${EP_NAME}-build" CACHE INTERNAL "")
