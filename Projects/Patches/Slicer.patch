diff --git a/Applications/SlicerApp/Main.cxx b/Applications/SlicerApp/Main.cxx
index 05d17fe..1619b75 100644
--- a/Applications/SlicerApp/Main.cxx
+++ b/Applications/SlicerApp/Main.cxx
@@ -26,6 +26,8 @@
 #include <QStyleFactory>
 #include <QSysInfo>
 #include <QTimer>
+// [BiiGTK] Required to set a transparency mask for splash screen.
+#include <QBitmap>
 
 // Slicer includes
 #include "vtkSlicerConfigure.h"
@@ -115,9 +117,9 @@ int SlicerAppMain(int argc, char* argv[])
     applicationName = QString::fromLocal8Bit(name.c_str());
     applicationName.remove(QString("App-real"));
     }
-  QCoreApplication::setApplicationName(applicationName);
+  QCoreApplication::setApplicationName(BiiGTK_PROJECT_NAME);
 
-  QCoreApplication::setApplicationVersion(Slicer_VERSION_FULL);
+  QCoreApplication::setApplicationVersion(BiiGTK_PROJECT_VERSION);
   //vtkObject::SetGlobalWarningDisplay(false);
   QApplication::setDesktopSettingsAware(false);
   QApplication::setStyle(new qSlicerStyle());
@@ -150,8 +152,10 @@ int SlicerAppMain(int argc, char* argv[])
   QScopedPointer<QSplashScreen> splashScreen;
   if (showSplashScreen)
     {
-    QPixmap pixmap(":/SplashScreen.png");
+    // [BiiGTK] Set splash screen with a transparency mask.
+    QPixmap pixmap(BiiGTK_PROJECT_SPLASH);
     splashScreen.reset(new QSplashScreen(pixmap));
+    splashScreen.data()->setMask(pixmap.mask());
     splashMessage(splashScreen, "Initializing...");
     splashScreen->show();
     }
@@ -182,7 +186,7 @@ int SlicerAppMain(int argc, char* argv[])
   if (enableMainWindow)
     {
     window.reset(new qSlicerAppMainWindow);
-    window->setWindowTitle(window->windowTitle()+ " " + Slicer_VERSION_FULL);
+    window->setWindowTitle(window->windowTitle()+ " " + BiiGTK_PROJECT_VERSION);
     }
 
   // Load all available modules
diff --git a/Base/QTCLI/qSlicerCLIModule.cxx b/Base/QTCLI/qSlicerCLIModule.cxx
index 90d8cf3..3937af8 100644
--- a/Base/QTCLI/qSlicerCLIModule.cxx
+++ b/Base/QTCLI/qSlicerCLIModule.cxx
@@ -175,6 +175,12 @@ void qSlicerCLIModule::setXmlModuleDescription(const QString& xmlModuleDescripti
     QString::fromStdString(desc.GetDescription())).arg(
     QString::fromStdString(desc.GetDocumentationURL()));
 
+  // [BiiGTK] Hide collapsible help widget if empty.
+  if (desc.GetDescription().empty() &&
+       desc.GetDocumentationURL().empty()) {
+      d->Help = QString();
+    }
+
   // Set module type
   desc.SetType(this->moduleType().toStdString());
 
diff --git a/Base/QTCore/qSlicerCoreApplication.cxx b/Base/QTCore/qSlicerCoreApplication.cxx
index 04d9d90..cd6a0f1 100644
--- a/Base/QTCore/qSlicerCoreApplication.cxx
+++ b/Base/QTCore/qSlicerCoreApplication.cxx
@@ -191,8 +191,9 @@ void qSlicerCoreApplicationPrivate::init()
     QMessageBox::information(0, "Attach process", msg.arg(QCoreApplication::applicationPid()));
     }
 
-  QCoreApplication::setOrganizationDomain(Slicer_ORGANIZATION_DOMAIN);
-  QCoreApplication::setOrganizationName(Slicer_ORGANIZATION_NAME);
+  // [BiiGTK] Set organization domain and name.
+  QCoreApplication::setOrganizationDomain("image.hggm.es");
+  QCoreApplication::setOrganizationName("BiiG");
 
   QSettings::setDefaultFormat(QSettings::IniFormat);
 
@@ -1346,14 +1347,10 @@ QString qSlicerCoreApplication::copyrights()const
 QString qSlicerCoreApplication::acknowledgment()const
 {
   QString acknowledgmentText(
-    "Slicer is NOT an FDA approved medical device.<br /><br />"
-    "Supported by: NA-MIC, NAC, BIRN, NCIGT and the Slicer Community.<br /><br />"
-    "Special thanks to the NIH and our other supporters.<br /><br />"
-    "This work is part of the National Alliance for Medical Image Computing "
-    "(NA-MIC), funded by the National Institutes of Health through the NIH "
-    "Roadmap for Medical Research, Grant U54 EB005149. Information on the "
-    "National Centers for Biomedical Computing can be obtained from "
-    "<a href=\"http://nihroadmap.nih.gov/bioinformatics\">http://nihroadmap.nih.gov/bioinformatics</a>.<br /><br />");
+    // [BiiGTK] Set acknowledgments message.
+    "BiiGTK is NOT an FDA approved medical device.<br /><br />"
+    "The BiiG group, Universidad Carlos III de Madrid\n"
+    "<a href=\"http://image.hggm.es\">image.hggm.es</a>.<br /><br />");
   return acknowledgmentText;
 }
 
diff --git a/Base/QTGUI/qSlicerSettingsModulesPanel.cxx b/Base/QTGUI/qSlicerSettingsModulesPanel.cxx
index 563e2bc..0dc0840 100644
--- a/Base/QTGUI/qSlicerSettingsModulesPanel.cxx
+++ b/Base/QTGUI/qSlicerSettingsModulesPanel.cxx
@@ -122,7 +122,8 @@ void qSlicerSettingsModulesPanelPrivate::init()
   this->DisableModulesListView->setFactoryManager( factoryManager );
   this->FavoritesModulesListView->setFactoryManager( factoryManager );
   
-  this->ModulesMenu->setCurrentModule(Slicer_DEFAULT_HOME_MODULE);
+  // [BiiGTK] Set home module.
+  this->ModulesMenu->setCurrentModule(BiiGTK_PROJECT_HOME);
   
   // Slicer_DEFAULT_FAVORITE_MODULES contains module names in a comma-separated list 
   // (chosen this format because the same format is used for storing the favorites list in the .ini file).
diff --git a/Base/QTGUI/qSlicerStyle.cxx b/Base/QTGUI/qSlicerStyle.cxx
index b5b3ea2..4e8d4c7 100644
--- a/Base/QTGUI/qSlicerStyle.cxx
+++ b/Base/QTGUI/qSlicerStyle.cxx
@@ -255,16 +255,17 @@ QRect qSlicerStyle::subControlRect(ComplexControl control, const QStyleOptionCom
 //------------------------------------------------------------------------------
 QPalette qSlicerStyle::standardPalette()const
 {
-  QPalette palette = this->Superclass::standardPalette();
-  palette.setColor(QPalette::Button, "#fcfcfc");
-  palette.setColor(QPalette::Light, "#c8c8c8");
-  palette.setColor(QPalette::Midlight, "#e6e6e6");
-  palette.setColor(QPalette::Dark, "#aaaaaa");
-  palette.setColor(QPalette::Mid, "#c8c8c8");
-  palette.setColor(QPalette::Base, Qt::white);
-  palette.setColor(QPalette::Window, Qt::white);
-  palette.setColor(QPalette::Shadow, "#5a5a5a");
-  palette.setColor(QPalette::AlternateBase, QColor("#e4e4fe"));
+  // [BiiGTK] Undo modification to standard palette.
+   QPalette palette = this->Superclass::standardPalette();
+  //palette.setColor(QPalette::Button, "#fcfcfc");
+  //palette.setColor(QPalette::Light, "#c8c8c8");
+  //palette.setColor(QPalette::Midlight, "#e6e6e6");
+  //palette.setColor(QPalette::Dark, "#aaaaaa");
+  //palette.setColor(QPalette::Mid, "#c8c8c8");
+  //palette.setColor(QPalette::Base, Qt::white);
+  //palette.setColor(QPalette::Window, Qt::white);
+  //palette.setColor(QPalette::Shadow, "#5a5a5a");
+  //palette.setColor(QPalette::AlternateBase, QColor("#e4e4fe"));
   return palette;
 }
 
diff --git a/CMake/MacOSXBundleInfo.plist.in b/CMake/MacOSXBundleInfo.plist.in
index 6ab9a0b..e477d5a 100644
--- a/CMake/MacOSXBundleInfo.plist.in
+++ b/CMake/MacOSXBundleInfo.plist.in
@@ -5,7 +5,7 @@
         <key>NSPrincipalClass</key>
         <string>NSApplication</string>
         <key>NSHighResolutionCapable</key>
-        <string>True</string>
+        <string>False</string>
         <key>CFBundleDevelopmentRegion</key>
         <string>English</string>
         <key>CFBundleExecutable</key>
diff --git a/CMake/SlicerMacroBuildApplication.cmake b/CMake/SlicerMacroBuildApplication.cmake
index e7a3710..954f454 100644
--- a/CMake/SlicerMacroBuildApplication.cmake
+++ b/CMake/SlicerMacroBuildApplication.cmake
@@ -360,8 +360,15 @@ macro(slicerMacroBuildApplication)
   endif(Q_WS_MAC)
 
   if(QT_MAC_USE_COCOA)
+    # [BiiGTK] Fix for using Qt from MacPorts.
+    find_path(QT_MENU_NIB_DIR qt_menu.nib
+              PATHS "@QT_QTGUI_LIBRARY_RELEASE@/Resources"
+              "@QT_QTGUI_LIBRARY_RELEASE@/../Resources")
+    if(NOT QT_MENU_NIB_DIR)
+      message(FATAL_ERROR "Failed to find qt_menu.nib")
+    endif()
     get_filename_component(qt_menu_nib
-      "@QT_QTGUI_LIBRARY_RELEASE@/Resources/qt_menu.nib"
+      "${QT_MENU_NIB_DIR}/qt_menu.nib"
       REALPATH)
 
     set(qt_menu_nib_sources
@@ -434,7 +441,7 @@ macro(slicerMacroBuildApplication)
     endif()
   endif()
 
-  if(WIN32)
+  if(OFF)
     if(Slicer_USE_PYTHONQT)
       # HACK - See http://www.na-mic.org/Bug/view.php?id=1180
       get_filename_component(_python_library_name_we ${PYTHON_LIBRARY} NAME_WE)
diff --git a/CMake/vtkSlicerConfigure.h.in b/CMake/vtkSlicerConfigure.h.in
index 83121d5..54219d0 100644
--- a/CMake/vtkSlicerConfigure.h.in
+++ b/CMake/vtkSlicerConfigure.h.in
@@ -117,4 +117,10 @@
 #define Slicer_QM_OUTPUT_DIRS "@Slicer_QM_OUTPUT_DIRS@"
 #define Slicer_LANGUAGES "@Slicer_LANGUAGES@"
 
+// [BiiGTK] Define CMake configuration options.
+#define BiiGTK_PROJECT_NAME "@BiiGTK_PROJECT_NAME@"
+#define BiiGTK_PROJECT_VERSION "@BiiGTK_PROJECT_VERSION@"
+#define BiiGTK_PROJECT_SPLASH "@BiiGTK_PROJECT_SPLASH@"
+#define BiiGTK_PROJECT_HOME "@BiiGTK_PROJECT_HOME@"
+
 #endif //__vtkSlicerConfigure_h
diff --git a/CMakeLists.txt b/CMakeLists.txt
index fe432a8..4532980 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -28,6 +28,7 @@ if(APPLE)
     VARS CMAKE_OSX_ARCHITECTURES:STRING CMAKE_OSX_SYSROOT:PATH CMAKE_OSX_DEPLOYMENT_TARGET:STRING
     ALL_PROJECTS
     )
+  unset(DYLD_LIBRARY_PATH)
 endif()
 
 project(Slicer)
@@ -700,15 +701,6 @@ set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${Slicer_BINARY_DIR}/${Slicer_LIB_DIR})
 set(Slicer_HOME "${Slicer_BINARY_DIR}")
 
 #-----------------------------------------------------------------------------
-# Avoid linker bug in Mac OS 10.5
-# See http://wiki.finkproject.org/index.php/Fink:Packaging:Preparing_for_10.5#OpenGL_Bug
-#
-if(APPLE)
-  set(CMAKE_SHARED_LINKER_FLAGS "-Wl,-dylib_file,/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib:/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib")
-  set(CMAKE_EXE_LINKER_FLAGS "-Wl,-dylib_file,/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib:/System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib")
-endif()
-
-#-----------------------------------------------------------------------------
 # Slicer include and libraries subdirectory
 #
 
diff --git a/Libs/FreeSurfer/CMakeLists.txt b/Libs/FreeSurfer/CMakeLists.txt
index c8840c6..57aa404 100644
--- a/Libs/FreeSurfer/CMakeLists.txt
+++ b/Libs/FreeSurfer/CMakeLists.txt
@@ -25,8 +25,8 @@ endif()
 #
 # VTK
 #
-#find_package(VTK REQUIRED)
-#include(${VTK_USE_FILE})
+find_package(VTK REQUIRED COMPONENTS ${Slicer_VTK_COMPONENTS} NO_MODULE)
+include(${VTK_USE_FILE})
 
 #
 # ZLIB
diff --git a/Libs/MRML/Core/CMakeLists.txt b/Libs/MRML/Core/CMakeLists.txt
index 8ff4588..1cc957b 100644
--- a/Libs/MRML/Core/CMakeLists.txt
+++ b/Libs/MRML/Core/CMakeLists.txt
@@ -39,8 +39,8 @@ mark_as_advanced(MRML_USE_vtkTeem)
 #
 # VTK
 #
-#find_package(VTK REQUIRED)
-#include(${VTK_USE_FILE})
+find_package(VTK REQUIRED COMPONENTS ${Slicer_VTK_COMPONENTS} NO_MODULE)
+include(${VTK_USE_FILE})
 
 #
 # ITK
diff --git a/Libs/MRML/Core/vtkMRMLViewNode.cxx b/Libs/MRML/Core/vtkMRMLViewNode.cxx
index 4339ba0..a8705dd 100644
--- a/Libs/MRML/Core/vtkMRMLViewNode.cxx
+++ b/Libs/MRML/Core/vtkMRMLViewNode.cxx
@@ -29,8 +29,8 @@ vtkMRMLNodeNewMacro(vtkMRMLViewNode);
 //----------------------------------------------------------------------------
 vtkMRMLViewNode::vtkMRMLViewNode()
 {
-  this->BoxVisible = 1;
-  this->AxisLabelsVisible = 1;
+  this->BoxVisible = 0;
+  this->AxisLabelsVisible = 0;
   this->AxisLabelsCameraDependent = 1;
   this->FiducialsVisible = 1;
   this->FiducialLabelsVisible = 1;
@@ -487,17 +487,17 @@ void vtkMRMLViewNode::PrintSelf(ostream& os, vtkIndent indent)
 double* vtkMRMLViewNode::defaultBackgroundColor()
 {
   //static double backgroundColor[3] = {0.70196, 0.70196, 0.90588};
-  static double backgroundColor[3] = {0.7568627450980392,
-                                      0.7647058823529412,
-                                      0.9098039215686275};
+  static double backgroundColor[3] = {0.0,
+                                      0.0,
+                                      0.0};
   return backgroundColor;
 }
 
 //------------------------------------------------------------------------------
 double* vtkMRMLViewNode::defaultBackgroundColor2()
 {
-  static double backgroundColor2[3] = {0.4549019607843137,
-                                       0.4705882352941176,
-                                       0.7450980392156863};
+  static double backgroundColor2[3] = {0.0,
+                                       0.0,
+                                       0.0};
   return backgroundColor2;
 }
diff --git a/Libs/MRML/Core/vtkMRMLVolumeArchetypeStorageNode.cxx b/Libs/MRML/Core/vtkMRMLVolumeArchetypeStorageNode.cxx
index 0870a65..e7ce447 100644
--- a/Libs/MRML/Core/vtkMRMLVolumeArchetypeStorageNode.cxx
+++ b/Libs/MRML/Core/vtkMRMLVolumeArchetypeStorageNode.cxx
@@ -625,7 +625,7 @@ void vtkMRMLVolumeArchetypeStorageNode::InitializeSupportedWriteFileTypes()
 //----------------------------------------------------------------------------
 const char* vtkMRMLVolumeArchetypeStorageNode::GetDefaultWriteFileExtension()
 {
-  return "nrrd";
+  return "nii";
 }
 
 //----------------------------------------------------------------------------
diff --git a/Libs/MRML/IDImageIO/CMakeLists.txt b/Libs/MRML/IDImageIO/CMakeLists.txt
index d58632d..a02931e 100644
--- a/Libs/MRML/IDImageIO/CMakeLists.txt
+++ b/Libs/MRML/IDImageIO/CMakeLists.txt
@@ -38,8 +38,8 @@ include(${ITK_USE_FILE})
 #
 # VTK
 #
-#find_package(VTK REQUIRED)
-#include(${VTK_USE_FILE})
+find_package(VTK REQUIRED COMPONENTS ${Slicer_VTK_COMPONENTS} NO_MODULE)
+include(${VTK_USE_FILE})
 
 # --------------------------------------------------------------------------
 # Include dirs
diff --git a/Libs/MRML/Widgets/qMRMLThreeDViewControllerWidget.cxx b/Libs/MRML/Widgets/qMRMLThreeDViewControllerWidget.cxx
index e9c0d4a..cc7f90f 100644
--- a/Libs/MRML/Widgets/qMRMLThreeDViewControllerWidget.cxx
+++ b/Libs/MRML/Widgets/qMRMLThreeDViewControllerWidget.cxx
@@ -478,13 +478,13 @@ void qMRMLThreeDViewControllerWidget::setFPSVisible(bool visible)
 void qMRMLThreeDViewControllerWidget::setLightBlueBackground()
 {
   this->setBackgroundColor(QColor::fromRgbF(
-    vtkMRMLViewNode::defaultBackgroundColor()[0],
-    vtkMRMLViewNode::defaultBackgroundColor()[1],
-    vtkMRMLViewNode::defaultBackgroundColor()[2]),
+    0.7568627450980392,
+    0.7647058823529412,
+    0.9098039215686275),
     QColor::fromRgbF(
-    vtkMRMLViewNode::defaultBackgroundColor2()[0],
-    vtkMRMLViewNode::defaultBackgroundColor2()[1],
-    vtkMRMLViewNode::defaultBackgroundColor2()[2]));
+    0.4549019607843137,
+    0.4705882352941176,
+    0.7450980392156863));
 }
 
 // --------------------------------------------------------------------------
diff --git a/Libs/RemoteIO/CMakeLists.txt b/Libs/RemoteIO/CMakeLists.txt
index 4e7e0f4..bdd9213 100644
--- a/Libs/RemoteIO/CMakeLists.txt
+++ b/Libs/RemoteIO/CMakeLists.txt
@@ -36,8 +36,8 @@ endif()
 #
 # VTK
 #
-#find_package(VTK REQUIRED)
-#include(${VTK_USE_FILE})
+find_package(VTK REQUIRED COMPONENTS ${Slicer_VTK_COMPONENTS} NO_MODULE)
+include(${VTK_USE_FILE})
 
 #
 # CURL
diff --git a/Libs/vtkAddon/CMakeLists.txt b/Libs/vtkAddon/CMakeLists.txt
index 33ba40a..5c9d12b 100644
--- a/Libs/vtkAddon/CMakeLists.txt
+++ b/Libs/vtkAddon/CMakeLists.txt
@@ -25,8 +25,8 @@ endif()
 #
 # VTK
 #
-#find_package(VTK REQUIRED)
-#include(${VTK_USE_FILE})
+find_package(VTK REQUIRED COMPONENTS ${Slicer_VTK_COMPONENTS} NO_MODULE)
+include(${VTK_USE_FILE})
 
 
 
@@ -100,6 +100,10 @@ if(${VTK_VERSION_MAJOR} GREATER 5)
   # Teem vtkNRRDReader overwrites VTK vtkNrrdReader
   set(VTK_WRAP_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${VTK_INCLUDE_DIRS}
       CACHE INTERNAL "VTK wrap include dirs" FORCE)
+  # With VTK > 6.2.0 (commit 4f7460a5), vtkRenderingFreeTypeOpenGL has been removed.
+  if(TARGET vtkRenderingFreeTypeOpenGL)
+    list(APPEND VTK_LIBRARIES vtkRenderingFreeTypeOpenGL)
+  endif()
 else()
   set(VTK_LIBRARIES
     vtkCommon
diff --git a/Libs/vtkITK/CMakeLists.txt b/Libs/vtkITK/CMakeLists.txt
index ff3d67e..0a67aac 100644
--- a/Libs/vtkITK/CMakeLists.txt
+++ b/Libs/vtkITK/CMakeLists.txt
@@ -25,8 +25,8 @@ endif()
 #
 # VTK
 #
-#find_package(VTK REQUIRED)
-#include(${VTK_USE_FILE})
+find_package(VTK REQUIRED COMPONENTS ${Slicer_VTK_COMPONENTS} NO_MODULE)
+include(${VTK_USE_FILE})
 
 if(${VTK_VERSION_MAJOR} GREATER 5)
   # Minimum set of libraries already specified using components
diff --git a/Libs/vtkTeem/CMakeLists.txt b/Libs/vtkTeem/CMakeLists.txt
index abd5720..7864ac3 100644
--- a/Libs/vtkTeem/CMakeLists.txt
+++ b/Libs/vtkTeem/CMakeLists.txt
@@ -25,8 +25,8 @@ endif()
 #
 # VTK
 #
-#find_package(VTK REQUIRED)
-#include(${VTK_USE_FILE})
+find_package(VTK REQUIRED COMPONENTS ${Slicer_VTK_COMPONENTS} NO_MODULE)
+include(${VTK_USE_FILE})
 
 #
 # Teem
@@ -134,6 +134,10 @@ if(${VTK_VERSION_MAJOR} GREATER 5)
   # Teem vtkNRRDReader overwrites VTK vtkNrrdReader
   set(VTK_WRAP_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR} ${VTK_INCLUDE_DIRS}
       CACHE INTERNAL "VTK wrap include dirs" FORCE)
+  # With VTK > 6.2.0 (commit 4f7460a5), vtkRenderingFreeTypeOpenGL has been removed.
+  if(TARGET vtkRenderingFreeTypeOpenGL)
+    list(APPEND VTK_LIBRARIES vtkRenderingFreeTypeOpenGL)
+  endif()
 else()
   set(VTK_LIBRARIES
     vtkCommon
diff --git a/Modules/CLI/MergeModels/CMakeLists.txt b/Modules/CLI/MergeModels/CMakeLists.txt
index b3c1757..f61172c 100644
--- a/Modules/CLI/MergeModels/CMakeLists.txt
+++ b/Modules/CLI/MergeModels/CMakeLists.txt
@@ -15,6 +15,8 @@ include(${SlicerExecutionModel_USE_FILE})
 #
 if(${VTK_VERSION_MAJOR} GREATER 5)
   # Minimum set of libraries already specified using components
+  find_package(VTK REQUIRED COMPONENTS ${Slicer_VTK_COMPONENTS} NO_MODULE)
+  include(${VTK_USE_FILE})
 else()
   set(VTK_LIBRARIES
     vtkIO
diff --git a/Modules/CLI/ModelToLabelMap/CMakeLists.txt b/Modules/CLI/ModelToLabelMap/CMakeLists.txt
index 2a61896..0fcc82a 100644
--- a/Modules/CLI/ModelToLabelMap/CMakeLists.txt
+++ b/Modules/CLI/ModelToLabelMap/CMakeLists.txt
@@ -29,6 +29,8 @@ include(${ITK_USE_FILE})
 #
 if(${VTK_VERSION_MAJOR} GREATER 5)
   # Minimum set of libraries already specified using components
+  find_package(VTK REQUIRED COMPONENTS ${Slicer_VTK_COMPONENTS} NO_MODULE)
+  include(${VTK_USE_FILE})
 else()
   set(VTK_LIBRARIES
     vtkIO
diff --git a/Modules/Loadable/CMakeLists.txt b/Modules/Loadable/CMakeLists.txt
index 7119cec..65c7e27 100644
--- a/Modules/Loadable/CMakeLists.txt
+++ b/Modules/Loadable/CMakeLists.txt
@@ -24,7 +24,7 @@ set(qtmodules
   Volumes
   VolumeRendering # Volume Rendering depends of Volumes
   )
-if(Slicer_BUILD_CLI_SUPPORT)
+if(Slicer_BUILD_CLI_SUPPORT AND Slicer_BUILD_CLI)
   list(APPEND qtmodules
     CropVolume
     )
diff --git a/Modules/Loadable/Markups/MRMLDM/vtkMRMLMarkupsFiducialDisplayableManager2D.cxx b/Modules/Loadable/Markups/MRMLDM/vtkMRMLMarkupsFiducialDisplayableManager2D.cxx
index b064cff..c4f4e21 100644
--- a/Modules/Loadable/Markups/MRMLDM/vtkMRMLMarkupsFiducialDisplayableManager2D.cxx
+++ b/Modules/Loadable/Markups/MRMLDM/vtkMRMLMarkupsFiducialDisplayableManager2D.cxx
@@ -675,7 +675,7 @@ void vtkMRMLMarkupsFiducialDisplayableManager2D::SetNthSeed(int n, vtkMRMLMarkup
       handleRep->VisibilityOn();
       handleRep->HandleVisibilityOn();
 #if (VTK_MAJOR_VERSION >= 6)
-      handleRep->EnablePicking();
+      handleRep->PickingManagedOn();
 #endif
       if (textString.compare("") != 0)
         {
@@ -695,7 +695,7 @@ void vtkMRMLMarkupsFiducialDisplayableManager2D::SetNthSeed(int n, vtkMRMLMarkup
       handleRep->HandleVisibilityOff();
       handleRep->LabelVisibilityOff();
 #if (VTK_MAJOR_VERSION >= 6)
-      handleRep->DisablePicking();
+      handleRep->PickingManagedOff();
       vtkSeedRepresentation *seedRepresentation = vtkSeedRepresentation::SafeDownCast(seedWidget->GetRepresentation());
       if (seedRepresentation)
         {
@@ -704,7 +704,7 @@ void vtkMRMLMarkupsFiducialDisplayableManager2D::SetNthSeed(int n, vtkMRMLMarkup
             seedRepresentation->GetHandleRepresentation());
         if (orientedHandleRep)
           {
-          orientedHandleRep->DisablePicking();
+          orientedHandleRep->PickingManagedOff();
           }
         }
 #else
@@ -1034,7 +1034,7 @@ void vtkMRMLMarkupsFiducialDisplayableManager2D::PropagateMRMLToWidget(vtkMRMLMa
     {
     if (handleRep)
       {
-      handleRep->DisablePicking();
+      handleRep->PickingManagedOff();
       }
     int seed = 0;
     vtkHandleWidget *handleWidget;
@@ -1047,7 +1047,7 @@ void vtkMRMLMarkupsFiducialDisplayableManager2D::PropagateMRMLToWidget(vtkMRMLMa
           vtkOrientedPolygonalHandleRepresentation3D::SafeDownCast(handleRepresentation);
         if (orientedHandleRep)
           {
-          orientedHandleRep->DisablePicking();
+          orientedHandleRep->PickingManagedOff();
           }
         }
       seed++;
@@ -1057,7 +1057,7 @@ void vtkMRMLMarkupsFiducialDisplayableManager2D::PropagateMRMLToWidget(vtkMRMLMa
     {
     if (handleRep)
       {
-      handleRep->EnablePicking();
+      handleRep->PickingManagedOn();
       }
     }
 #endif
diff --git a/SuperBuild.cmake b/SuperBuild.cmake
index 6159b33..7a6ef15 100644
--- a/SuperBuild.cmake
+++ b/SuperBuild.cmake
@@ -360,6 +360,12 @@ ExternalProject_Add(${proj}
     -DSlicer_APPLICATIONS_DIR:PATH=${Slicer_APPLICATIONS_DIR}
     -DSlicer_EXTENSION_SOURCE_DIRS:STRING=${Slicer_EXTENSION_SOURCE_DIRS}
     ${EXTERNAL_PROJECT_OPTIONAL_ARGS}
+    # [BiiGTK] Forward CMake options to internal Slicer project.
+    -DSlicer_BUILD_WIN32_CONSOLE:BOOL=ON
+    -DBiiGTK_PROJECT_NAME:STRING=${BiiGTK_PROJECT_NAME}
+    -DBiiGTK_PROJECT_VERSION:STRING=${BiiGTK_PROJECT_VERSION}
+    -DBiiGTK_PROJECT_SPLASH:FILEPATH=${BiiGTK_PROJECT_SPLASH}
+    -DBiiGTK_PROJECT_HOME:STRING=${BiiGTK_PROJECT_HOME}
   INSTALL_COMMAND ""
   )
 
diff --git a/SuperBuild/External_CTK.cmake b/SuperBuild/External_CTK.cmake
index b30b59d..3b2a48c 100644
--- a/SuperBuild/External_CTK.cmake
+++ b/SuperBuild/External_CTK.cmake
@@ -14,13 +14,12 @@ endif()
 ExternalProject_Include_Dependencies(${proj} PROJECT_VAR proj DEPENDS_VAR ${proj}_DEPENDENCIES)
 
 if(${CMAKE_PROJECT_NAME}_USE_SYSTEM_${proj})
-  message(FATAL_ERROR "Enabling ${CMAKE_PROJECT_NAME}_USE_SYSTEM_${proj} is not supported !")
+  find_package(CTK 0.1.0 REQUIRED NO_MODULE)
 endif()
 
 # Sanity checks
 if(DEFINED CTK_DIR AND NOT EXISTS ${CTK_DIR})
-  unset(CTK_DIR CACHE)
-  find_package(CTK 0.1.0 REQUIRED NO_MODULE)
+  message(FATAL_ERROR "CTK_DIR variable is defined but corresponds to nonexistent directory")
 endif()
 
 if(NOT DEFINED CTK_DIR AND NOT ${CMAKE_PROJECT_NAME}_USE_SYSTEM_${proj})
diff --git a/SuperBuild/External_DCMTK.cmake b/SuperBuild/External_DCMTK.cmake
index 7bcdd46..22955d0 100644
--- a/SuperBuild/External_DCMTK.cmake
+++ b/SuperBuild/External_DCMTK.cmake
@@ -8,8 +8,8 @@ set(${proj}_DEPENDENCIES "zlib")
 ExternalProject_Include_Dependencies(${proj} PROJECT_VAR proj DEPENDS_VAR ${proj}_DEPENDENCIES)
 
 if(${CMAKE_PROJECT_NAME}_USE_SYSTEM_${proj})
-  unset(DCMTK_DIR CACHE)
-  find_package(DCMTK REQUIRED)
+  list(APPEND CMAKE_MODULE_PATH "${ITK_SOURCE_DIR}/Modules/ThirdParty/DCMTK/CMake")
+  find_package(DCMTK REQUIRED CONFIG)
 endif()
 
 # Sanity checks
diff --git a/SuperBuild/External_ITKv4.cmake b/SuperBuild/External_ITKv4.cmake
index b7d94f9..40ef883 100644
--- a/SuperBuild/External_ITKv4.cmake
+++ b/SuperBuild/External_ITKv4.cmake
@@ -14,8 +14,7 @@ endif()
 ExternalProject_Include_Dependencies(${proj} PROJECT_VAR proj DEPENDS_VAR ${proj}_DEPENDENCIES)
 
 if(${CMAKE_PROJECT_NAME}_USE_SYSTEM_${proj})
-  unset(ITK_DIR CACHE)
-  find_package(ITK 4.6 REQUIRED NO_MODULE)
+  find_package(ITK REQUIRED NO_MODULE)
 endif()
 
 # Sanity checks
diff --git a/SuperBuild/External_OpenIGTLink.cmake b/SuperBuild/External_OpenIGTLink.cmake
index 28504bc..be16e08 100644
--- a/SuperBuild/External_OpenIGTLink.cmake
+++ b/SuperBuild/External_OpenIGTLink.cmake
@@ -8,7 +8,6 @@ set(${proj}_DEPENDENCIES "")
 ExternalProject_Include_Dependencies(${proj} PROJECT_VAR proj DEPENDS_VAR ${proj}_DEPENDENCIES)
 
 if(${CMAKE_PROJECT_NAME}_USE_SYSTEM_${proj})
-  unset(OpenIGTLink_DIR CACHE)
   find_package(OpenIGTLink REQUIRED NO_MODULE)
 endif()
 
diff --git a/SuperBuild/External_VTKv6.cmake b/SuperBuild/External_VTKv6.cmake
index 49879fc..d34cfc8 100644
--- a/SuperBuild/External_VTKv6.cmake
+++ b/SuperBuild/External_VTKv6.cmake
@@ -11,8 +11,6 @@ endif()
 ExternalProject_Include_Dependencies(${proj} PROJECT_VAR proj DEPENDS_VAR ${proj}_DEPENDENCIES)
 
 if(${CMAKE_PROJECT_NAME}_USE_SYSTEM_${proj})
-  unset(VTK_DIR CACHE)
-  unset(VTK_SOURCE_DIR CACHE)
   find_package(VTK REQUIRED NO_MODULE)
 endif()
 
diff --git a/SuperBuild/External_python.cmake b/SuperBuild/External_python.cmake
index 9170a77..f1efecc 100644
--- a/SuperBuild/External_python.cmake
+++ b/SuperBuild/External_python.cmake
@@ -21,9 +21,6 @@ endif()
 ExternalProject_Include_Dependencies(${proj} PROJECT_VAR proj DEPENDS_VAR ${proj}_DEPENDENCIES)
 
 if(${CMAKE_PROJECT_NAME}_USE_SYSTEM_${proj})
-  unset(PYTHON_INCLUDE_DIR CACHE)
-  unset(PYTHON_LIBRARY CACHE)
-  unset(PYTHON_EXECUTABLE CACHE)
   find_package(PythonLibs REQUIRED)
   find_package(PythonInterp REQUIRED)
   set(PYTHON_INCLUDE_DIR ${PYTHON_INCLUDE_DIRS})
diff --git a/SuperBuild/External_zlib.cmake b/SuperBuild/External_zlib.cmake
index 2155e58..bea6369 100644
--- a/SuperBuild/External_zlib.cmake
+++ b/SuperBuild/External_zlib.cmake
@@ -8,7 +8,6 @@ set(${proj}_DEPENDENCIES "")
 ExternalProject_Include_Dependencies(${proj} PROJECT_VAR proj DEPENDS_VAR ${proj}_DEPENDENCIES)
 
 if(${CMAKE_PROJECT_NAME}_USE_SYSTEM_${proj})
-  unset(zlib_DIR CACHE)
   find_package(ZLIB REQUIRED)
   set(ZLIB_INCLUDE_DIR ${ZLIB_INCLUDE_DIRS})
   set(ZLIB_LIBRARY ${ZLIB_LIBRARIES})
