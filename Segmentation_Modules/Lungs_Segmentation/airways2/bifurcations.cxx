/*
 * bifurcations.cxx
 *
 *  Created on: Mar 25, 2011
 *      Author: mario
 */

#include "bifurcations.h"
#include <assert.h>
#include <algorithm>
#include "log.h"

#define debug 0

std::vector< PointType > BifurcationChecker::walk_connected(const PointType point, const PropagationInfo *prop) {
	/*
	 * We take a point from the wavefront, pick up a neighbour and go iterate till there are neighbours.
	 * If it didn't visit all the points in the wavefront, then it is disconnected and is probably a branch.
	 */


//	std::cout << "FIXME: define bb_start and bb_end in the proper place and with the correct image dimensions!" << std::endl;
	PointType bb_start; bb_start[0] = 0; bb_start[1] = 0;
	bb_start[2] = 14; // this should be z-position of seed FIXME soon
	PointType bb_end;
	bb_end[0] = prop->image_size[0];
	bb_end[1] = prop->image_size[1];
	bb_end[2] = prop->image_size[2];

	std::vector< PointType > visited;
	std::vector< PointType > wavefront = prop->trials;
	std::vector< PointType > nexts;
	nexts.push_back(point);

	while (true){
		//std::cout << "nexts: " << nexts.size() << " visited " << visited.size() << std::endl;

		if (nexts.size() <= 0) {
			//std::cout << "nexts is empty: stopping walk connected..." << std::endl;
			break;
		}


		PointType p = nexts.back();
		nexts.pop_back();
		visited.push_back(p);

		std::vector< PointType > neighs = getNeighs(p,bb_start,bb_end);
		std::vector< PointType >::iterator it;

		for ( it = neighs.begin() ; it < neighs.end(); it++ ) {

			//Take only those who belongs to the wavefront
			if ( (contains(&wavefront,*it)) && (not contains(&visited,*it) ) && (not contains(&nexts,*it) )) {
				nexts.push_back(*it);
			}
		}

	}
	return visited;

}

/*bool BifurcationChecker::check(const PropagationInfo *prop){

	bool connected = true;

	if (prop->trials.empty()) {
		std::cerr << "NO trials in wavefront. Maybe you forgot to initialize?" << std::endl;
        return connected;
	}

	const PointType point = prop->trials.front();
	std::cout << "Check using this point (front): " << point << "\n";
    std::vector< PointType > visited = walk_connected(point, prop);

    //std::cout << "Visited: " << visited.size() << "Totals: " << prop->points.size() << std::endl;
//    std::cout << "Prop trials: ";
//    for (int i=0; i<prop->trials.size() ; i++)
//    	std::cout << prop->trials.at(i) << ",";
//    std::cout << "\n";
    connected = (visited.size() == prop->trials.size());
    std::cout << "Check returns: "<< connected << ", ";
    std::cout << "Visited: " << visited.size() << ", Totals: " << prop->trials.size() << std::endl;
    return connected;
}*/

std::vector< std::vector<PointType> > BifurcationChecker::split_connected(PropagationInfo work_copy){
	/*
	 * Takes a point from the wavefront and tries to walk it.
	 * Whenever it stops removes the visited points from the original container
	 * and stores it as a separate region.
	 * Then repeats till the original container is empty
	 *
	 */

	pLogType l = get_logger("BIF_CHECK::split_connected");
	std::vector< std::vector<PointType> > regions;
	if (work_copy.trials.empty()) {
		l->errorStream() << "NO trials in wavefront. Maybe you forgot to initialize?";
        return regions;
	}
	l->infoStream() << "Splitting a wavefront of " << work_copy.trials.size() << " points";
	while(work_copy.trials.size() > 0) {

		//Walk the remaning points:
		const PointType point = work_copy.trials.back();


		std::vector< PointType > visited = walk_connected(point, &work_copy);

		//Store the visited points as a new region
		regions.push_back(visited);
		l->infoStream() << "visited size is " << visited.size();
		// Don't bother continuing if the propagation is connected
		if (visited.size()==work_copy.trials.size()) break;
		// Remove visited points from the original container
		std::vector< PointType >::iterator it;

		for ( unsigned int i = 0; i < visited.size(); i++ ){
			it = find ( work_copy.trials.begin(), work_copy.trials.end(), visited.at(i));
			work_copy.trials.erase(it);
		}

	}

	// FIXME need to detect break due to noise - threshold this at 5% - if a region contains less than 5% of original wavefront

	// single-point regions? increase connectivity check to

	return regions;
}

// comment out when compiling extract_air
/*int main( int argc, char *argv[] ) {

	//set seed to be 257 235 15
	PropagationInfo propinfo = PropagationInfo();
	propinfo.image_size[0] = 512;
	propinfo.image_size[1] = 512;
	propinfo.image_size[2] = 290;

	PointType v;
	int myints[434][3] = {{251,282,51},{252, 282, 51},{246, 280, 52},{247, 280, 52},{248, 281, 52},{249, 281, 52},{250, 281, 52},{251, 281, 52},{252, 282, 52},{253, 282, 52},{254, 282, 52},{244, 278, 53},{245, 279, 53},{246, 279, 53},{247, 279, 53},{248, 280, 53},{249, 280, 53},{250, 280, 53},{251, 280, 53},{252, 281, 53},{253, 281, 53},{254, 281, 53},{255, 281, 53},{256, 281, 53},{243, 277, 54},{244, 277, 54},{245, 278, 54},{246, 278, 54},{247, 278, 54},{248, 279, 54},{249, 279, 54},{250, 279, 54},{251, 279, 54},{252, 279, 54},{253, 279, 54},{259, 279, 54},{252, 280, 54},{253, 280, 54},{254, 280, 54},{255, 280, 54},{256, 280, 54},{257, 280, 54},{258, 280, 54},{242, 274, 55},{243, 275, 55},{243, 276, 55},{244, 276, 55},{245, 276, 55},{245, 277, 55},{246, 277, 55},{247, 277, 55},{248, 277, 55},{249, 277, 55},{248, 278, 55},{249, 278, 55},{250, 278, 55},{251, 278, 55},{252, 278, 55},{253, 278, 55},{254, 278, 55},{255, 278, 55},{256, 278, 55},{258, 278, 55},{259, 278, 55},{260, 278, 55},{254, 279, 55},{255, 279, 55},{256, 279, 55},{257, 279, 55},{258, 279, 55},{242, 273, 56},{243, 274, 56},{244, 274, 56},{244, 275, 56},{245, 275, 56},{246, 275, 56},{247, 275, 56},{246, 276, 56},{247, 276, 56},{248, 276, 56},{249, 276, 56},{250, 276, 56},{251, 276, 56},{250, 277, 56},{251, 277, 56},{252, 277, 56},{253, 277, 56},{254, 277, 56},{255, 277, 56},{256, 277, 56},{257, 277, 56},{258, 277, 56},{259, 277, 56},{260, 277, 56},{257, 278, 56},{242, 272, 57},{243, 272, 57},{243, 273, 57},{244, 273, 57},{245, 273, 57},{245, 274, 57},{246, 274, 57},{247, 274, 57},{248, 274, 57},{249, 274, 57},{248, 275, 57},{249, 275, 57},{250, 275, 57},{251, 275, 57},{252, 275, 57},{253, 275, 57},{254, 275, 57},{255, 275, 57},{259, 275, 57},{260, 275, 57},{261, 275, 57},{262, 275, 57},{252, 276, 57},{253, 276, 57},{254, 276, 57},{255, 276, 57},{256, 276, 57},{257, 276, 57},{258, 276, 57},{259, 276, 57},{260, 276, 57},{261, 276, 57},{242, 270, 58},{242, 271, 58},{243, 271, 58},{244, 271, 58},{245, 271, 58},{244, 272, 58},{245, 272, 58},{246, 272, 58},{247, 272, 58},{248, 272, 58},{246, 273, 58},{247, 273, 58},{248, 273, 58},{249, 273, 58},{250, 273, 58},{251, 273, 58},{252, 273, 58},{262, 273, 58},{250, 274, 58},{251, 274, 58},{252, 274, 58},{253, 274, 58},{254, 274, 58},{255, 274, 58},{256, 274, 58},{257, 274, 58},{258, 274, 58},{259, 274, 58},{260, 274, 58},{261, 274, 58},{262, 274, 58},{256, 275, 58},{257, 275, 58},{258, 275, 58},{242, 267, 59},{242, 268, 59},{242, 269, 59},{243, 269, 59},{244, 269, 59},{243, 270, 59},{244, 270, 59},{245, 270, 59},{246, 270, 59},{247, 270, 59},{246, 271, 59},{247, 271, 59},{248, 271, 59},{249, 271, 59},{250, 271, 59},{251, 271, 59},{263, 271, 59},{249, 272, 59},{250, 272, 59},{251, 272, 59},{252, 272, 59},{253, 272, 59},{254, 272, 59},{255, 272, 59},{256, 272, 59},{257, 272, 59},{258, 272, 59},{259, 272, 59},{260, 272, 59},{261, 272, 59},{262, 272, 59},{263, 272, 59},{253, 273, 59},{254, 273, 59},{255, 273, 59},{256, 273, 59},{257, 273, 59},{258, 273, 59},{259, 273, 59},{260, 273, 59},{261, 273, 59},{243, 266, 60},{243, 267, 60},{244, 267, 60},{243, 268, 60},{244, 268, 60},{245, 268, 60},{246, 268, 60},{247, 268, 60},{245, 269, 60},{246, 269, 60},{247, 269, 60},{248, 269, 60},{249, 269, 60},{250, 269, 60},{251, 269, 60},{263, 269, 60},{248, 270, 60},{249, 270, 60},{250, 270, 60},{251, 270, 60},{252, 270, 60},{253, 270, 60},{254, 270, 60},{255, 270, 60},{256, 270, 60},{257, 270, 60},{258, 270, 60},{259, 270, 60},{260, 270, 60},{261, 270, 60},{262, 270, 60},{263, 270, 60},{252, 271, 60},{253, 271, 60},{254, 271, 60},{255, 271, 60},{256, 271, 60},{257, 271, 60},{258, 271, 60},{259, 271, 60},{260, 271, 60},{261, 271, 60},{262, 271, 60},{243, 263, 61},{243, 264, 61},{243, 265, 61},{244, 265, 61},{245, 265, 61},{244, 266, 61},{245, 266, 61},{246, 266, 61},{247, 266, 61},{248, 266, 61},{245, 267, 61},{246, 267, 61},{247, 267, 61},{248, 267, 61},{249, 267, 61},{250, 267, 61},{251, 267, 61},{252, 267, 61},{262, 267, 61},{263, 267, 61},{248, 268, 61},{249, 268, 61},{250, 268, 61},{251, 268, 61},{252, 268, 61},{253, 268, 61},{254, 268, 61},{255, 268, 61},{256, 268, 61},{257, 268, 61},{258, 268, 61},{259, 268, 61},{260, 268, 61},{261, 268, 61},{262, 268, 61},{263, 268, 61},{252, 269, 61},{253, 269, 61},{254, 269, 61},{255, 269, 61},{256, 269, 61},{257, 269, 61},{258, 269, 61},{259, 269, 61},{260, 269, 61},{261, 269, 61},{262, 269, 61},{244, 261, 62},{244, 262, 62},{245, 262, 62},{244, 263, 62},{245, 263, 62},{246, 263, 62},{244, 264, 62},{245, 264, 62},{246, 264, 62},{247, 264, 62},{248, 264, 62},{249, 264, 62},{246, 265, 62},{247, 265, 62},{248, 265, 62},{249, 265, 62},{250, 265, 62},{251, 265, 62},{252, 265, 62},{253, 265, 62},{254, 265, 62},{260, 265, 62},{261, 265, 62},{262, 265, 62},{249, 266, 62},{250, 266, 62},{251, 266, 62},{252, 266, 62},{253, 266, 62},{254, 266, 62},{255, 266, 62},{256, 266, 62},{257, 266, 62},{258, 266, 62},{259, 266, 62},{260, 266, 62},{261, 266, 62},{262, 266, 62},{253, 267, 62},{254, 267, 62},{255, 267, 62},{256, 267, 62},{257, 267, 62},{258, 267, 62},{259, 267, 62},{260, 267, 62},{261, 267, 62},{246, 260, 63},{247, 260, 63},{245, 261, 63},{246, 261, 63},{247, 261, 63},{248, 261, 63},{249, 261, 63},{246, 262, 63},{247, 262, 63},{248, 262, 63},{249, 262, 63},{250, 262, 63},{251, 262, 63},{252, 262, 63},{247, 263, 63},{248, 263, 63},{249, 263, 63},{250, 263, 63},{251, 263, 63},{252, 263, 63},{253, 263, 63},{254, 263, 63},{255, 263, 63},{256, 263, 63},{257, 263, 63},{258, 263, 63},{259, 263, 63},{260, 263, 63},{261, 263, 63},{250, 264, 63},{251, 264, 63},{252, 264, 63},{253, 264, 63},{254, 264, 63},{255, 264, 63},{256, 264, 63},{257, 264, 63},{258, 264, 63},{259, 264, 63},{260, 264, 63},{261, 264, 63},{255, 265, 63},{256, 265, 63},{257, 265, 63},{258, 265, 63},{259, 265, 63},{249, 257, 64},{248, 258, 64},{249, 258, 64},{250, 258, 64},{247, 259, 64},{248, 259, 64},{249, 259, 64},{250, 259, 64},{251, 259, 64},{252, 259, 64},{253, 259, 64},{248, 260, 64},{249, 260, 64},{250, 260, 64},{251, 260, 64},{252, 260, 64},{253, 260, 64},{254, 260, 64},{255, 260, 64},{256, 260, 64},{257, 260, 64},{258, 260, 64},{250, 261, 64},{251, 261, 64},{252, 261, 64},{253, 261, 64},{254, 261, 64},{255, 261, 64},{256, 261, 64},{257, 261, 64},{258, 261, 64},{259, 261, 64},{253, 262, 64},{254, 262, 64},{255, 262, 64},{256, 262, 64},{257, 262, 64},{258, 262, 64},{259, 262, 64},{260, 262, 64},{251, 258, 65},{252, 258, 65},{253, 258, 65},{254, 258, 65},{255, 258, 65},{254, 259, 65},{255, 259, 65},{256, 259, 65},{257, 259, 65}};
	for (int i=0; i<434; i++) {
		v[0] = myints[i][0];
		v[1] = myints[i][1];
		v[2] = myints[i][2];
		propinfo.trials.push_back(v);
	}

	BifurcationChecker bif_checker = BifurcationChecker();
//	bif_checker.walk_connected(point, &propinfo);
	bif_checker.check(&propinfo);
	bif_checker.split_connected(propinfo);


//	PointType point;
//	point[0] = 253;
//	point[1] = 258;
//	point[2] = 65;
//	PointType bb_start; bb_start[0] = 0; bb_start[1] = 0; bb_start[2] = 0;
//	PointType bb_end;
//	bb_end[0] = propinfo.image_size[0];
//	bb_end[1] = propinfo.image_size[1];
//	bb_end[2] = propinfo.image_size[2];
//	std::cout << "bb_start: "<< bb_start <<", bb_end: " << bb_end <<"\n";
//
//	std::vector< PointType > neighs = getNeighs(point,bb_start,bb_end);
//	std::cout << "checking point: "<< point << ", neighs: ";
//	for (int i=0; i<neighs.size(); i++)
//		std::cout << neighs.at(i) ;
//	std::cout << std::endl;
//
//	std::cout << "Checking contains(): " << bif_checker.contains(&neighs, point) << "\n";

// visited
//	[250, 281, 52],[251, 281, 52],[252, 282, 51],[252, 282, 52],[252, 281, 53],[253, 281, 53],[253, 282, 52],[254, 281, 53],[254, 282, 52],[255, 281, 53],[254, 280, 54],[255, 280, 54],[256, 280, 54],[256, 281, 53],[257, 280, 54],[256, 279, 55],[257, 279, 55],[258, 279, 55],[258, 280, 54],[259, 279, 54],[258, 278, 55],[259, 278, 55],[260, 278, 55],[259, 277, 56],[260, 277, 56],[259, 276, 57],[260, 276, 57],[261, 276, 57],[260, 275, 57],[261, 275, 57],[262, 275, 57],[261, 274, 58],[262, 274, 58],[261, 273, 59],[262, 273, 58],[261, 272, 59],[262, 272, 59],[263, 272, 59],[262, 271, 60],[263, 271, 59],[262, 270, 60],[263, 270, 60],[262, 269, 61],[263, 269, 60],[262, 268, 61],[263, 268, 61],[262, 267, 61],[263, 267, 61],[262, 266, 62],[261, 265, 62],[261, 266, 62],[261, 267, 62],[262, 265, 62],[261, 264, 63],[260, 263, 63],[260, 264, 63],[260, 265, 62],[261, 263, 63],[260, 262, 64],[259, 261, 64],[259, 262, 64],[259, 263, 63],[258, 262, 64],[258, 263, 63],[258, 264, 63],[259, 264, 63],[258, 265, 63],[259, 265, 63],[258, 266, 62],[259, 266, 62],[260, 266, 62],[259, 267, 62],[260, 267, 62],[259, 268, 61],[260, 268, 61],[261, 268, 61],[260, 269, 61],[261, 269, 61],[260, 270, 60],[261, 270, 60],[260, 271, 60],[261, 271, 60],[260, 272, 59],[259, 271, 60],[259, 272, 59],[259, 273, 59],[260, 273, 59],[259, 274, 58],[260, 274, 58],[259, 275, 57],[258, 274, 58],[258, 275, 58],[258, 276, 57],[257, 275, 58],[257, 276, 57],[257, 277, 56],[258, 277, 56],[257, 278, 56],[256, 277, 56],[256, 278, 55],[255, 277, 56],[255, 278, 55],[255, 279, 55],[254, 278, 55],[254, 279, 55],[253, 278, 55],[253, 279, 54],[253, 280, 54],[252, 279, 54],[252, 280, 54],[251, 279, 54],[251, 280, 53],[250, 279, 54],[250, 280, 53],[249, 279, 54],[249, 280, 53],[249, 281, 52],[248, 280, 53],[248, 281, 52],[247, 280, 52],[246, 279, 53],[246, 280, 52],[247, 279, 53],[246, 278, 54],[247, 278, 54],[248, 279, 54],[248, 278, 55],[249, 278, 55],[248, 277, 55],[249, 277, 55],[250, 277, 56],[250, 278, 55],[251, 277, 56],[251, 278, 55],[252, 277, 56],[252, 278, 55],[253, 277, 56],[252, 276, 57],[253, 276, 57],[254, 276, 57],[254, 277, 56],[255, 276, 57],[254, 275, 57],[255, 275, 57],[256, 275, 58],[256, 276, 57],[255, 274, 58],[256, 274, 58],[257, 274, 58],[256, 273, 59],[257, 273, 59],[258, 273, 59],[257, 272, 59],[258, 272, 59],[257, 271, 60],[258, 271, 60],[257, 270, 60],[258, 270, 60],[259, 270, 60],[258, 269, 61],[259, 269, 61],[258, 268, 61],[257, 267, 62],[257, 268, 61],[257, 269, 61],[258, 267, 62],[257, 266, 62],[256, 265, 63],[256, 266, 62],[256, 267, 62],[257, 265, 63],[256, 264, 63],[257, 264, 63],[256, 263, 63],[257, 263, 63],[256, 262, 64],[257, 262, 64],[256, 261, 64],[257, 261, 64],[258, 261, 64],[257, 260, 64],[258, 260, 64],[257, 259, 65],[256, 259, 65],[256, 260, 64],[255, 259, 65],[255, 260, 64],[255, 261, 64],[254, 260, 64],[254, 261, 64],[254, 262, 64],[255, 262, 64],[254, 263, 63],[255, 263, 63],[254, 264, 63],[255, 264, 63],[254, 265, 62],[255, 265, 63],[254, 266, 62],[255, 266, 62],[254, 267, 62],[255, 267, 62],[254, 268, 61],[255, 268, 61],[256, 268, 61],[255, 269, 61],[256, 269, 61],[255, 270, 60],[256, 270, 60],[255, 271, 60],[256, 271, 60],[255, 272, 59],[256, 272, 59],[255, 273, 59],[254, 272, 59],[254, 273, 59],[254, 274, 58],[253, 273, 59],[253, 274, 58],[253, 275, 57],[252, 274, 58],[252, 275, 57],[251, 274, 58],[251, 275, 57],[251, 276, 56],[250, 275, 57],[250, 276, 56],[249, 275, 57],[249, 276, 56],[248, 275, 57],[248, 276, 56],[247, 275, 56],[247, 276, 56],[247, 277, 55],[246, 276, 56],[246, 277, 55],[245, 276, 55],[245, 277, 55],[245, 278, 54],[244, 277, 54],[244, 278, 53],[245, 279, 53],[243, 277, 54],[243, 276, 55],[244, 276, 55],[243, 275, 55],[244, 275, 56],[245, 275, 56],[244, 274, 56],[245, 274, 57],[246, 274, 57],[246, 275, 56],[247, 274, 57],[246, 273, 58],[247, 273, 58],[248, 273, 58],[248, 274, 57],[249, 273, 58],[249, 274, 57],[250, 273, 58],[250, 274, 58],[251, 273, 58],[250, 272, 59],[251, 272, 59],[252, 272, 59],[252, 273, 58],[253, 272, 59],[252, 271, 60],[253, 271, 60],[254, 271, 60],[253, 270, 60],[254, 270, 60],[253, 269, 61],[254, 269, 61],[253, 268, 61],[252, 267, 61],[252, 268, 61],[252, 269, 61],[253, 267, 62],[252, 266, 62],[253, 266, 62],[252, 265, 62],[253, 265, 62],[252, 264, 63],[253, 264, 63],[252, 263, 63],[253, 263, 63],[252, 262, 63],[253, 262, 64],[252, 261, 64],[253, 261, 64],[252, 260, 64],[253, 260, 64],[252, 259, 64],[253, 259, 64],[254, 259, 65],[253, 258, 65],[254, 258, 65],[255, 258, 65],[252, 258, 65],[251, 258, 65],[251, 259, 64],[250, 258, 64],[250, 259, 64],[250, 260, 64],[251, 260, 64],[250, 261, 64],[251, 261, 64],[250, 262, 63],[251, 262, 63],[250, 263, 63],[251, 263, 63],[250, 264, 63],[251, 264, 63],[250, 265, 62],[251, 265, 62],[250, 266, 62],[251, 266, 62],[250, 267, 61],[251, 267, 61],[250, 268, 61],[251, 268, 61],[250, 269, 60],[251, 269, 60],[250, 270, 60],[251, 270, 60],[252, 270, 60],[251, 271, 59],[250, 271, 59],[249, 270, 60],[249, 271, 59],[249, 272, 59],[248, 271, 59],[248, 272, 58],[247, 271, 59],[247, 272, 58],[246, 271, 59],[246, 272, 58],[245, 271, 58],[245, 272, 58],[245, 273, 57],[244, 272, 58],[244, 273, 57],[243, 272, 57],[243, 273, 57],[243, 274, 56],[242, 273, 56],[242, 274, 55],[242, 272, 57],[242, 271, 58],[243, 271, 58],[242, 270, 58],[243, 270, 59],[244, 270, 59],[244, 271, 58],[245, 270, 59],[244, 269, 59],[245, 269, 60],[246, 269, 60],[246, 270, 59],[247, 269, 60],[247, 270, 59],[248, 269, 60],[248, 270, 60],[249, 269, 60],[248, 268, 61],[249, 268, 61],[248, 267, 61],[249, 267, 61],[248, 266, 61],[249, 266, 62],[248, 265, 62],[249, 265, 62],[248, 264, 62],[249, 264, 62],[248, 263, 63],[249, 263, 63],[248, 262, 63],[249, 262, 63],[248, 261, 63],[249, 261, 63],[248, 260, 64],[249, 260, 64],[248, 259, 64],[249, 259, 64],[248, 258, 64],[249, 258, 64],[249, 257, 64],[247, 259, 64],[246, 260, 63],[247, 260, 63],[246, 261, 63],[247, 261, 63],[246, 262, 63],[247, 262, 63],[246, 263, 62],[247, 263, 63],[246, 264, 62],[247, 264, 62],[246, 265, 62],[247, 265, 62],[246, 266, 61],[247, 266, 61],[246, 267, 61],[247, 267, 61],[246, 268, 60],[247, 268, 60],[245, 267, 61],[245, 268, 60],[244, 267, 60],[244, 268, 60],[243, 267, 60],[243, 268, 60],[243, 269, 59],[242, 268, 59],[242, 269, 59],[242, 267, 59],[243, 266, 60],[243, 265, 61],[244, 265, 61],[244, 266, 61],[245, 265, 61],[245, 266, 61],[244, 264, 62],[245, 264, 62],[244, 263, 62],[245, 263, 62],[244, 262, 62],[245, 262, 62],[244, 261, 62],[245, 261, 63],[243, 263, 61],[243, 264, 61]
// prop points
//	[251, 282, 51],[252, 282, 51],[246, 280, 52],[247, 280, 52],[248, 281, 52],[249, 281, 52],[250, 281, 52],[251, 281, 52],[252, 282, 52],[253, 282, 52],[254, 282, 52],[244, 278, 53],[245, 279, 53],[246, 279, 53],[247, 279, 53],[248, 280, 53],[249, 280, 53],[250, 280, 53],[251, 280, 53],[252, 281, 53],[253, 281, 53],[254, 281, 53],[255, 281, 53],[256, 281, 53],[243, 277, 54],[244, 277, 54],[245, 278, 54],[246, 278, 54],[247, 278, 54],[248, 279, 54],[249, 279, 54],[250, 279, 54],[251, 279, 54],[252, 279, 54],[253, 279, 54],[259, 279, 54],[252, 280, 54],[253, 280, 54],[254, 280, 54],[255, 280, 54],[256, 280, 54],[257, 280, 54],[258, 280, 54],[242, 274, 55],[243, 275, 55],[243, 276, 55],[244, 276, 55],[245, 276, 55],[245, 277, 55],[246, 277, 55],[247, 277, 55],[248, 277, 55],[249, 277, 55],[248, 278, 55],[249, 278, 55],[250, 278, 55],[251, 278, 55],[252, 278, 55],[253, 278, 55],[254, 278, 55],[255, 278, 55],[256, 278, 55],[258, 278, 55],[259, 278, 55],[260, 278, 55],[254, 279, 55],[255, 279, 55],[256, 279, 55],[257, 279, 55],[258, 279, 55],[242, 273, 56],[243, 274, 56],[244, 274, 56],[244, 275, 56],[245, 275, 56],[246, 275, 56],[247, 275, 56],[246, 276, 56],[247, 276, 56],[248, 276, 56],[249, 276, 56],[250, 276, 56],[251, 276, 56],[250, 277, 56],[251, 277, 56],[252, 277, 56],[253, 277, 56],[254, 277, 56],[255, 277, 56],[256, 277, 56],[257, 277, 56],[258, 277, 56],[259, 277, 56],[260, 277, 56],[257, 278, 56],[242, 272, 57],[243, 272, 57],[243, 273, 57],[244, 273, 57],[245, 273, 57],[245, 274, 57],[246, 274, 57],[247, 274, 57],[248, 274, 57],[249, 274, 57],[248, 275, 57],[249, 275, 57],[250, 275, 57],[251, 275, 57],[252, 275, 57],[253, 275, 57],[254, 275, 57],[255, 275, 57],[259, 275, 57],[260, 275, 57],[261, 275, 57],[262, 275, 57],[252, 276, 57],[253, 276, 57],[254, 276, 57],[255, 276, 57],[256, 276, 57],[257, 276, 57],[258, 276, 57],[259, 276, 57],[260, 276, 57],[261, 276, 57],[242, 270, 58],[242, 271, 58],[243, 271, 58],[244, 271, 58],[245, 271, 58],[244, 272, 58],[245, 272, 58],[246, 272, 58],[247, 272, 58],[248, 272, 58],[246, 273, 58],[247, 273, 58],[248, 273, 58],[249, 273, 58],[250, 273, 58],[251, 273, 58],[252, 273, 58],[262, 273, 58],[250, 274, 58],[251, 274, 58],[252, 274, 58],[253, 274, 58],[254, 274, 58],[255, 274, 58],[256, 274, 58],[257, 274, 58],[258, 274, 58],[259, 274, 58],[260, 274, 58],[261, 274, 58],[262, 274, 58],[256, 275, 58],[257, 275, 58],[258, 275, 58],[242, 267, 59],[242, 268, 59],[242, 269, 59],[243, 269, 59],[244, 269, 59],[243, 270, 59],[244, 270, 59],[245, 270, 59],[246, 270, 59],[247, 270, 59],[246, 271, 59],[247, 271, 59],[248, 271, 59],[249, 271, 59],[250, 271, 59],[251, 271, 59],[263, 271, 59],[249, 272, 59],[250, 272, 59],[251, 272, 59],[252, 272, 59],[253, 272, 59],[254, 272, 59],[255, 272, 59],[256, 272, 59],[257, 272, 59],[258, 272, 59],[259, 272, 59],[260, 272, 59],[261, 272, 59],[262, 272, 59],[263, 272, 59],[253, 273, 59],[254, 273, 59],[255, 273, 59],[256, 273, 59],[257, 273, 59],[258, 273, 59],[259, 273, 59],[260, 273, 59],[261, 273, 59],[243, 266, 60],[243, 267, 60],[244, 267, 60],[243, 268, 60],[244, 268, 60],[245, 268, 60],[246, 268, 60],[247, 268, 60],[245, 269, 60],[246, 269, 60],[247, 269, 60],[248, 269, 60],[249, 269, 60],[250, 269, 60],[251, 269, 60],[263, 269, 60],[248, 270, 60],[249, 270, 60],[250, 270, 60],[251, 270, 60],[252, 270, 60],[253, 270, 60],[254, 270, 60],[255, 270, 60],[256, 270, 60],[257, 270, 60],[258, 270, 60],[259, 270, 60],[260, 270, 60],[261, 270, 60],[262, 270, 60],[263, 270, 60],[252, 271, 60],[253, 271, 60],[254, 271, 60],[255, 271, 60],[256, 271, 60],[257, 271, 60],[258, 271, 60],[259, 271, 60],[260, 271, 60],[261, 271, 60],[262, 271, 60],[243, 263, 61],[243, 264, 61],[243, 265, 61],[244, 265, 61],[245, 265, 61],[244, 266, 61],[245, 266, 61],[246, 266, 61],[247, 266, 61],[248, 266, 61],[245, 267, 61],[246, 267, 61],[247, 267, 61],[248, 267, 61],[249, 267, 61],[250, 267, 61],[251, 267, 61],[252, 267, 61],[262, 267, 61],[263, 267, 61],[248, 268, 61],[249, 268, 61],[250, 268, 61],[251, 268, 61],[252, 268, 61],[253, 268, 61],[254, 268, 61],[255, 268, 61],[256, 268, 61],[257, 268, 61],[258, 268, 61],[259, 268, 61],[260, 268, 61],[261, 268, 61],[262, 268, 61],[263, 268, 61],[252, 269, 61],[253, 269, 61],[254, 269, 61],[255, 269, 61],[256, 269, 61],[257, 269, 61],[258, 269, 61],[259, 269, 61],[260, 269, 61],[261, 269, 61],[262, 269, 61],[244, 261, 62],[244, 262, 62],[245, 262, 62],[244, 263, 62],[245, 263, 62],[246, 263, 62],[244, 264, 62],[245, 264, 62],[246, 264, 62],[247, 264, 62],[248, 264, 62],[249, 264, 62],[246, 265, 62],[247, 265, 62],[248, 265, 62],[249, 265, 62],[250, 265, 62],[251, 265, 62],[252, 265, 62],[253, 265, 62],[254, 265, 62],[260, 265, 62],[261, 265, 62],[262, 265, 62],[249, 266, 62],[250, 266, 62],[251, 266, 62],[252, 266, 62],[253, 266, 62],[254, 266, 62],[255, 266, 62],[256, 266, 62],[257, 266, 62],[258, 266, 62],[259, 266, 62],[260, 266, 62],[261, 266, 62],[262, 266, 62],[253, 267, 62],[254, 267, 62],[255, 267, 62],[256, 267, 62],[257, 267, 62],[258, 267, 62],[259, 267, 62],[260, 267, 62],[261, 267, 62],[246, 260, 63],[247, 260, 63],[245, 261, 63],[246, 261, 63],[247, 261, 63],[248, 261, 63],[249, 261, 63],[246, 262, 63],[247, 262, 63],[248, 262, 63],[249, 262, 63],[250, 262, 63],[251, 262, 63],[252, 262, 63],[247, 263, 63],[248, 263, 63],[249, 263, 63],[250, 263, 63],[251, 263, 63],[252, 263, 63],[253, 263, 63],[254, 263, 63],[255, 263, 63],[256, 263, 63],[257, 263, 63],[258, 263, 63],[259, 263, 63],[260, 263, 63],[261, 263, 63],[250, 264, 63],[251, 264, 63],[252, 264, 63],[253, 264, 63],[254, 264, 63],[255, 264, 63],[256, 264, 63],[257, 264, 63],[258, 264, 63],[259, 264, 63],[260, 264, 63],[261, 264, 63],[255, 265, 63],[256, 265, 63],[257, 265, 63],[258, 265, 63],[259, 265, 63],[249, 257, 64],[248, 258, 64],[249, 258, 64],[250, 258, 64],[247, 259, 64],[248, 259, 64],[249, 259, 64],[250, 259, 64],[251, 259, 64],[252, 259, 64],[253, 259, 64],[248, 260, 64],[249, 260, 64],[250, 260, 64],[251, 260, 64],[252, 260, 64],[253, 260, 64],[254, 260, 64],[255, 260, 64],[256, 260, 64],[257, 260, 64],[258, 260, 64],[250, 261, 64],[251, 261, 64],[252, 261, 64],[253, 261, 64],[254, 261, 64],[255, 261, 64],[256, 261, 64],[257, 261, 64],[258, 261, 64],[259, 261, 64],[253, 262, 64],[254, 262, 64],[255, 262, 64],[256, 262, 64],[257, 262, 64],[258, 262, 64],[259, 262, 64],[260, 262, 64],[251, 258, 65],[252, 258, 65],[253, 258, 65],[254, 258, 65],[255, 258, 65],[254, 259, 65],[255, 259, 65],[256, 259, 65],[257, 259, 65]

	// to check if prop points are connected, do a walk_connected from point, prop->trials

	return 0;
}*/
